When would you want to use a remote repository rather than keeping all your work
local?

  When collaborating with people or if do not have enough space on your local drive. 
  Or if often working from different computers.
  
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

   Because program or file may not be ready to be presented to the public
   because may have bugs or terrible features

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Clones are making exact copies of a repository. Use when copying from
    your GitHub account or copying on your local machine.

    Forks are like a type of cloning specific to GitHub. Use when want to work
    on someone else's project but don't have permisiion to change it on their github account.
    Often useful to the clone to local machine to actually do the changes.

    Branches are labels for commits. Useful for trying out new features or just
    working with diffrent versions of code. Also useful for compartmentalising
    bugs. Additionally, great for dharing with public non-production-ready features.
    All that need to do is push that as a separate branch and it will be 
    available for public on GitHub.



What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can access it offline

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would use some other version-control system. Like dropbox. Combined 
    with any messaging app to let people know of my changes.
    Github automates a lot of processes for me and is optimised for collaborating
    on programming projects. Therefore, GitHub makes things much easier.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Making changes in branches can make things more complicated when collaborating because 
    need to make changes and keep merging and making pull requests.
    However, often when trying new features and what a peer to review your code,
    it is much easier to make branches so don't make any permanent changes to
    master. This is essential in a team effort to build something and obviously
    don't want people accidentally breaking master.
